// Code generated by MockGen. DO NOT EDIT.
// Source: cronjobs/cron.go

// Package mock_cronjobs is a generated GoMock package.
package mock_cronjobs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cron "github.com/robfig/cron/v3"
)

// MockCronScheduler is a mock of CronScheduler interface.
type MockCronScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockCronSchedulerMockRecorder
}

// MockCronSchedulerMockRecorder is the mock recorder for MockCronScheduler.
type MockCronSchedulerMockRecorder struct {
	mock *MockCronScheduler
}

// NewMockCronScheduler creates a new mock instance.
func NewMockCronScheduler(ctrl *gomock.Controller) *MockCronScheduler {
	mock := &MockCronScheduler{ctrl: ctrl}
	mock.recorder = &MockCronSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronScheduler) EXPECT() *MockCronSchedulerMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockCronScheduler) AddTask(spec string, task func()) (cron.EntryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", spec, task)
	ret0, _ := ret[0].(cron.EntryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockCronSchedulerMockRecorder) AddTask(spec, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockCronScheduler)(nil).AddTask), spec, task)
}

// RemoveTask mocks base method.
func (m *MockCronScheduler) RemoveTask(id cron.EntryID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTask indicates an expected call of RemoveTask.
func (mr *MockCronSchedulerMockRecorder) RemoveTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTask", reflect.TypeOf((*MockCronScheduler)(nil).RemoveTask), id)
}

// Start mocks base method.
func (m *MockCronScheduler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCronSchedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronScheduler)(nil).Start))
}

// Stop mocks base method.
func (m *MockCronScheduler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCronSchedulerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronScheduler)(nil).Stop))
}
